
1 - Set up the project.
oc new-project nexus --display-name "Shared Nexus" --description "Shared Nexus"

2 - Set up the Nexus pod.
oc new-app sonatype/nexus3:latest

3 - Expose the service as a route.
oc expose svc nexus3

4 - Pause the deployment. 
oc rollout pause dc nexus3

5 - Change the deployment strategy from rolling to recreate.
oc patch dc nexus3 --patch='{ "spec": { "strategy": { "type": "Recreate" }}}'

6 - Create a new PVC and connect it to "/nexus-data".
oc create -f nexus-pvc.yaml
oc set volume dc/nexus3 --add --overwrite --name=nexus3-volume-1 --mount-path=/nexus-data/ --type persistentVolumeClaim --claim-name=nexus-pvc

7 - Set up liveness and readiness probes.
oc set probe dc/nexus3 --liveness --failure-threshold 3 --initial-delay-seconds 60 -- echo ok
oc set probe dc/nexus3 --readiness --failure-threshold 3 --initial-delay-seconds 60 --get-url=http://:8081/repository/maven-public/

8 - Resume the deployment. 
oc rollout resume dc nexus3

9 - Once Nexus is deployed, set up Red Hat repositories using the default user ID (admin) and password (admin123).
    This creates a maven-all-public repository that is a proxy repository for all of the required artifacts.
    It also creates a releases repository for the ".war" files that we are about to build.
curl -o setup_nexus3.sh -s https://raw.githubusercontent.com/wkulhanek/ocp_advanced_development_resources/master/nexus/setup_nexus3.sh
chmod +x setup_nexus3.sh
./setup_nexus3.sh admin admin123 http://$(oc get route nexus3 --template='{{ .spec.host }}')

10 - Remove the "setup_nexus3.sh" file.
rm setup_nexus3.sh

1 - Set up the project.
oc new-project sonarqube --display-name "Shared Sonarqube" --description "Shared Sonarqube"

2 - Set up the persistent PostgreSQL database.
oc new-app postgresql-persistent -p POSTGRESQL_DATABASE=sonar -p POSTGRESQL_USER=sonar -p POSTGRESQL_PASSWORD=sonar -p VOLUME_CAPACITY=4Gi -l app=postgresql-sonarqube

3 - Set up the SonarQube pod.
    OBS: Make sure that PostgreSQL is deployed before starting the SonarQube deployment.
#oc new-app wkulhanek/sonarqube:6.5 -e SONARQUBE_JDBC_USERNAME=sonar -e SONARQUBE_JDBC_PASSWORD=sonar -e SONARQUBE_JDBC_URL=jdbc:postgresql://postgresql/sonar -l app=sonarqube
oc new-app wkulhanek/sonarqube:latest -e SONARQUBE_JDBC_USERNAME=sonar -e SONARQUBE_JDBC_PASSWORD=sonar -e SONARQUBE_JDBC_URL=jdbc:postgresql://postgresql/sonar -l app=sonarqube

4 - Expose the service as a route.
oc expose svc sonarqube --port=9000

5 - Pause the deployment. 
oc rollout pause dc sonarqube

6 - Create a new PVC and connect it to "/opt/sonarqube/data".
oc create -f sonarqube-pvc.yaml
oc set volume dc/sonarqube --add --overwrite --name=sonarqube-volume-1 --mount-path=/opt/sonarqube/data/ --type persistentVolumeClaim --claim-name=sonarqube-pvc

7 - Set up liveness and readiness probes.
oc set probe dc/sonarqube --liveness --failure-threshold 3 --initial-delay-seconds 40 -- echo ok
oc set probe dc/sonarqube --readiness --failure-threshold 3 --initial-delay-seconds 20 --get-url=http://:9000/about

8 - Resume the deployment.
oc rollout resume dc sonarqube
